version: 2.1

jobs:
  build:
    docker:
      - image: cimg/python:3.11.4

    steps:
      - checkout  # Checkout the source code from your repository

      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt

      - run:
          name: Compile Python Files to .pyc
          command: |
            python -m compileall python_project/.;
            mkdir /tmp/pycfiles;
      - store_artifacts:
          path: python_project/__pycache__  # Replace with the correct path to the __pycache__ directory
          destination: tmp/pycfiles

      # Store the .pyc files as artifacts
  dummy-artifactory:
    docker:
      - image: python:3.6.3-jessie
    working_directory: /tmp
    steps:
      - run:
          name: Artifactory Upload Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1;
            mkdir /tmp/artifacts;
            mkdir jffog;
            echo "my artifact files in a dir" > /tmp/artifacts/artifacts-2;
      - store_artifacts:
          path: /tmp/artifact-1
          destination: artifact-file

      - store_artifacts:
          path: /tmp/artifacts

  upload-dummy-artifact:
    docker:
      - image: python:3.6.3-jessie
    working_directory: /tmp
    steps:
      - run:
          name: Install JFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh

      - run:
          name: push to Artifactory
          command: |
            ./jfrog config add arsoft.jfrog.io --artifactory-url $ARTIFACTORY_URL --user arunl --enc-password=false --access-token=$ARTIFACTORY_TOKEN
            ./jfrog rt u artifacts/ pypi --build-name=testupload --build-number=1.0.1

  python_package:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - run:
          name: Generating distribution archives
          command: |
            cd python_project/python_package;
            ls;
            python3 -m pip install --upgrade build;
            python3 -m pip install --upgrade pip;
            python3 -m build;
            cd dist;
            ls;
      - run:
          name: Install JFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh

      - run:
          name: push to Artifactory
          command: |
            ./jfrog config add arsoft.jfrog.io --artifactory-url $ARTIFACTORY_URL --user arunl --enc-password=false --access-token=$ARTIFACTORY_TOKEN
            ./jfrog rt u python_project/python_package/dist/ pypi --build-name=testupload --build-number=1.0.0
            #./jfrog rt bce testupload 1.0.0 
            #./jfrog rt bp testupload 1.0.0 
  
      #- run:
       #   name: uploading distribution events
        #  command: |
         #   pwd; /?
           # python3 -m pip install --upgrade twine;
            #echo "testing";
            #ls;
            #python3 -m twine upload --repository testpypi python_project/python_package/dist/* --username arunl --password Splk#vlr@123;
          
              
workflows:
  build_workflow:
    jobs:
      - build
      - python_package
  dummy-artifactory:
    jobs:
      - dummy-artifactory
      - upload-dummy-artifact


